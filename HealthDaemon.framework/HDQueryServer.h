/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDQueryServer : NSObject <HDDataObserver, HDDatabaseProtectedDataObserver, HDTaskServer, HKQueryServerInterface> {
    HDClientAuthorizationOracle * _authorizationOracle;
    NSDictionary * _baseDataEntityEncodingOptions;
    HDXPCClient * _client;
    double  _collectionInterval;
    HKQueryServerConfiguration * _configuration;
    HDDataCollectionAssertion * _dataCollectionAssertion;
    NSArray * _dataObservationAssertions;
    <HDQueryServerDelegate> * _delegate;
    bool  _didEndActivationTransaction;
    _HKFilter * _filter;
    bool  _isCollectingData;
    HKObjectType * _objectType;
    bool  _observingData;
    HDProfile * _profile;
    id /* block */  _queryDidFinishHandler;
    NSObject<OS_dispatch_queue> * _queryQueue;
    long long  _queryState;
    NSUUID * _queryUUID;
    int  _shouldFinish;
    int  _shouldPause;
    bool  _shouldTakeObservationAssertions;
    NSObject<OS_dispatch_queue> * _unitTestQueryQueue;
    id /* block */  _unitTest_queryServerSetShouldPauseHandler;
    id /* block */  _unitTest_queryServerWillChangeStateHandler;
}

@property (nonatomic, readonly) HDClientAuthorizationOracle *authorizationOracle;
@property (nonatomic, readonly) HDXPCClient *client;
@property (readonly) bool clientHasActiveWorkout;
@property (readonly) bool clientIsInForeground;
@property (nonatomic, readonly) <HKQueryClientInterface><NSXPCProxyCreating> *clientProxy;
@property (nonatomic) double collectionInterval;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <HDQueryServerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) _HKFilter *filter;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) HKObjectType *objectType;
@property (nonatomic, readonly) HDProfile *profile;
@property (nonatomic, readonly) HKQuantityType *quantityType;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queryQueue;
@property (nonatomic, readonly) long long queryState;
@property (nonatomic, readonly, copy) NSUUID *queryUUID;
@property (nonatomic, readonly) HKSampleType *sampleType;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ unitTest_queryServerSetShouldPauseHandler;
@property (nonatomic, copy) id /* block */ unitTest_queryServerWillChangeStateHandler;

+ (id)builtInQueryServerClasses;
+ (Class)configurationClass;
+ (Class)queryClass;
+ (id)requiredEntitlements;
+ (bool)supportsAnchorBasedAuthorization;
+ (id)taskIdentifier;
+ (bool)validateConfiguration:(id)arg1 error:(out id*)arg2;

- (void).cxx_destruct;
- (id)_activationTransactionString;
- (id)_collectionObserverState;
- (void)_currentWorkoutDidChange:(id)arg1;
- (id)_predicateString;
- (id)_queryStateString;
- (void)_queue_beginObservingDataTypes;
- (void)_queue_closeActivationTransactionIfNecessary;
- (void)_queue_endObservingDataTypes;
- (id)_queue_sampleTypesForObservation;
- (void)_queue_setQueryState:(long long)arg1;
- (void)_queue_setSampleTypeObservationAssertions:(id)arg1;
- (void)_queue_start;
- (void)_queue_startDataCollection;
- (void)_queue_startDataCollectionIfNecessary;
- (void)_queue_startQueryIfNecessary;
- (void)_queue_stop;
- (void)_queue_stopDataCollection;
- (void)_queue_transitionToFinished;
- (void)_queue_transitionToPaused;
- (void)_queue_transitionToRunning;
- (void)_queue_transitionToSuspendedState:(long long)arg1;
- (void)_queue_updateSampleTypeObservationAssertions;
- (bool)_queue_validateConfiguration:(id*)arg1;
- (id)_sampleTypeToObserveForUpdates;
- (void)_scheduleStartQuery;
- (bool)_shouldExecuteWhenProtectedDataIsUnavailable;
- (bool)_shouldListenForUpdates;
- (bool)_shouldObserveAllSampleTypes;
- (bool)_shouldObserveDatabaseProtectedDataAvailability;
- (bool)_shouldObserveOnPause;
- (bool)_shouldRegisterAsProtectedDataObserver;
- (bool)_shouldStopProcessingQuery;
- (bool)_shouldSuspendQuery;
- (void)activateServerPaused:(bool)arg1 completion:(id /* block */)arg2;
- (id)authorizationOracle;
- (id)client;
- (bool)clientHasActiveWorkout;
- (bool)clientIsInForeground;
- (id)clientProxy;
- (void)clientStateChanged;
- (double)collectionInterval;
- (void)connectionInvalidated;
- (void)database:(id)arg1 protectedDataDidBecomeAvailable:(bool)arg2;
- (void)deactivateServerWithCompletion:(id /* block */)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (id)diagnosticDescription;
- (id)exportedInterface;
- (id)filter;
- (id)filteredSamplesForClientWithSamples:(id)arg1;
- (id)initWithUUID:(id)arg1 configuration:(id)arg2 client:(id)arg3 profile:(id)arg4 delegate:(id)arg5;
- (id)newDataEntityEnumerator;
- (id)objectType;
- (void)onQueue:(id /* block */)arg1;
- (void)pauseServer;
- (id)profile;
- (id)quantityType;
- (id)queryQueue;
- (long long)queryState;
- (id)queryUUID;
- (id)readAuthorizationStatusForType:(id)arg1 error:(id*)arg2;
- (id)remoteInterface;
- (void)remote_deactivateServer;
- (void)remote_startQueryWithCompletion:(id /* block */)arg1;
- (void)resumeServer;
- (id /* block */)sampleAuthorizationFilter;
- (id)sampleType;
- (void)samplesAdded:(id)arg1 anchor:(id)arg2;
- (void)samplesOfTypesWereRemoved:(id)arg1 anchor:(id)arg2;
- (id)sanitizedSampleForQueryClient:(id)arg1;
- (void)scheduleDatabaseAccessOnQueueWithBlock:(id /* block */)arg1;
- (void)setCollectionInterval:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setQueryDidFinishHandler:(id /* block */)arg1;
- (void)setShouldPause:(bool)arg1;
- (void)setUnitTest_queryServerSetShouldPauseHandler:(id /* block */)arg1;
- (void)setUnitTest_queryServerWillChangeStateHandler:(id /* block */)arg1;
- (id)taskUUID;
- (id /* block */)unitTest_queryServerSetShouldPauseHandler;
- (id /* block */)unitTest_queryServerWillChangeStateHandler;

@end
