/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon
 */

@interface HDDatabase : NSObject <HDAssertionObserver, HDContentProtectionObserver, HDDiagnosticObject, HDHealthDatabase, HDSQLiteDatabaseDelegate, HDSQLiteDatabasePoolDelegate, HDSQLiteDatabaseProvider> {
    NSMutableSet * _activeDatabases;
    NSConditionLock * _activeDatabasesLock;
    HDAssertionManager * _assertionManager;
    NSOperationQueue * _asynchronousOperationQueue;
    HDDatabaseJournal * _cloudSyncJournal;
    HDContentProtectionManager * _contentProtectionManager;
    NSDictionary * _databasePoolForType;
    bool  _didRunPostMigrationUpdates;
    NSMutableDictionary * _extendedTransactions;
    NSMutableArray * _firstUnlockBlocks;
    bool  _hasFlushedProtectedData;
    NSObject<OS_dispatch_queue> * _hfdQueue;
    struct shared_ptr<health::DataStore> { 
        struct DataStore {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _highFrequencyDataStore;
    bool  _invalidated;
    bool  _isObservingContentProtection;
    HDDatabaseJournal * _journal;
    NSObject<OS_dispatch_group> * _journalGroup;
    NSObject<OS_dispatch_queue> * _journalQueue;
    NSHashTable * _migratedDatabases;
    long long  _observedContentProtectionState;
    double  _offsetTimeInterval;
    unsigned long long  _pendingJournalMerges;
    HDProfile * _profile;
    NSString * _profileDirectoryPath;
    NSDate * _protectedDataFlushDeadlineDate;
    NSObject<OS_dispatch_source> * _protectedDataFlushDeadlineTimer;
    double  _protectedDataFlushInterval;
    HKObserverSet * _protectedDataObservers;
    NSObject<OS_dispatch_queue> * _protectedDataQueue;
    long long  _protectedDataState;
    NSLock * _schemaMigrationLock;
    NSObject<OS_dispatch_queue> * _secondaryJournalMergeQueue;
    bool  _shouldNotifyFirstUnlockObservers;
    NSString * _threadLocalIgnoreTransactionContextKey;
    NSString * _threadLocalTransactionContextKey;
    NSString * _threadLocalTransactionKey;
    id /* block */  _unitTest_didWaitForJournalMergeHandler;
    NSLock * _writeLock;
}

@property (nonatomic, retain) NSMutableSet *activeDatabases;
@property (nonatomic, retain) NSConditionLock *activeDatabasesLock;
@property (nonatomic, retain) HDAssertionManager *assertionManager;
@property (nonatomic, retain) NSOperationQueue *asynchronousOperationQueue;
@property (nonatomic, readonly) HDDatabaseJournal *cloudSyncJournal;
@property (nonatomic, retain) HDContentProtectionManager *contentProtectionManager;
@property (getter=isDataProtectedByFirstUnlockAvailable, nonatomic, readonly) bool dataProtectedByFirstUnlockAvailable;
@property (nonatomic, retain) NSDictionary *databasePoolForType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didRunPostMigrationUpdates;
@property (nonatomic, retain) NSMutableDictionary *extendedTransactions;
@property (readonly) unsigned long long hash;
@property (readonly) bool invalidated;
@property (nonatomic, readonly) HDDatabaseJournal *journal;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *journalGroup;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *journalQueue;
@property (nonatomic, retain) NSHashTable *migratedDatabases;
@property (nonatomic) double offsetTimeInterval;
@property (nonatomic) unsigned long long pendingJournalMerges;
@property (nonatomic) HDProfile *profile;
@property (nonatomic, readonly, copy) NSString *profileDirectoryPath;
@property (getter=isProtectedDataAvailable, nonatomic, readonly) bool protectedDataAvailable;
@property (nonatomic) double protectedDataFlushInterval;
@property (nonatomic, retain) NSLock *schemaMigrationLock;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *secondaryJournalMergeQueue;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *threadLocalIgnoreTransactionContextKey;
@property (nonatomic, readonly, copy) NSString *threadLocalTransactionContextKey;
@property (nonatomic, readonly, copy) NSString *threadLocalTransactionKey;
@property (nonatomic, copy) id /* block */ unitTest_didWaitForJournalMergeHandler;

+ (id)_databaseCorruptionDefaultKeyForDatabaseWithName:(id)arg1;
+ (id)allCurrentAndFutureEntityClasses;
+ (void)didEncounterUncorruptedDatabaseWithName:(id)arg1;
+ (void)didPassIntegrityCheck;
+ (void)loadEntityClasses;
+ (void)reportDatabaseCorruptionForDatabaseWithName:(id)arg1;
+ (void)reportIntegrityCheckFailure;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)HFDSizeInBytes;
- (id)_URLForWALForDatabaseAtURL:(id)arg1;
- (bool)_allowProtectedDataAccessWhileLockedWithTransactionContext:(id)arg1;
- (bool)_applyOffsetTimeInterval:(double)arg1 database:(id)arg2 error:(id*)arg3;
- (bool)_attachProtectedDatabaseIfNeededToDatabase:(id)arg1 transaction:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (bool)_canAttachProtectedDatabaseForTransaction:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (void)_checkInDatabase:(id)arg1 type:(long long)arg2 flushImmediately:(bool)arg3;
- (id)_checkOutDatabaseForTransaction:(id)arg1 databaseType:(long long)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (id)_cloudSyncJournalDirectoryPath;
- (bool)_createDataTablesInDatabase:(id)arg1 entityClasses:(id)arg2 requiredPrefix:(id)arg3 error:(id*)arg4;
- (id)_createDatabaseConnection;
- (id)_createDatabaseConnectionWithURL:(id)arg1;
- (bool)_createEntitiesForSchemaProvider:(id)arg1 protectionClass:(long long)arg2 migrator:(id)arg3 error:(id*)arg4;
- (bool)_createEntitiesOrAddMigrationStepsForProtectionClass:(long long)arg1 schemaProviders:(id)arg2 migrator:(id)arg3 error:(id*)arg4;
- (long long)_createEntitiesWithMigrationTransaction:(id)arg1 error:(id*)arg2;
- (id)_currentDatabaseJournal;
- (void)_enableIncrementalAutovacuumIfNeededForTransaction:(id)arg1;
- (bool)_enableSecureDeleteForDatabase:(id)arg1 error:(id*)arg2;
- (long long)_fileSizeForURL:(id)arg1 error:(id*)arg2;
- (struct shared_ptr<health::DataStore> { struct DataStore {} *x1; struct __shared_weak_count {} *x2; })_highFrequencyDataStoreWithError:(id*)arg1;
- (bool)_isDatabaseValidWithError:(id*)arg1;
- (id)_journalDirectoryPath;
- (id)_journalForType:(long long)arg1;
- (bool)_journalQueue_performJournalMergeAndCleanup;
- (void)_mergeSecondaryJournals;
- (bool)_migrateOrCreateProtectedSchemaInDatabase:(id)arg1 transactionContext:(id)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (long long)_migrateOrCreateProtectedSchemaInDatabaseIfWritable:(id)arg1 error:(id*)arg2;
- (long long)_migrateOrCreateSchemaWithMigrationTransaction:(id)arg1 error:(id*)arg2;
- (long long)_migrateWithMigrationTransaction:(id)arg1 fromUserVersion:(long long)arg2 error:(id*)arg3;
- (bool)_migrationRequiredForProtectionClass:(long long)arg1 migrator:(id)arg2 schemaProviders:(id)arg3 error:(id*)arg4;
- (id)_newDatabaseConnectionWithError:(id*)arg1;
- (long long)_performMigrationWithUnprotectedDatabase:(id)arg1 protectedDatabase:(id)arg2 error:(id*)arg3 block:(id /* block */)arg4;
- (void)_presentRollbackAlertForSchema:(id)arg1 protectionClass:(long long)arg2 foundVersion:(long long)arg3 currentVersion:(long long)arg4;
- (void)_protectedDataQueue_beginObservingContentProtection;
- (void)_protectedDataQueue_cancelProtectedDataFlushTimer;
- (void)_protectedDataQueue_flushProtectedDataIfNecessary;
- (bool)_protectedDataQueue_isProtectedDataFlushDeadlinePassed;
- (void)_protectedDataQueue_mergeJournalAsynchronously;
- (long long)_protectedDataState;
- (void)_reportDatabaseSizes;
- (bool)_runPostMigrationUpdatesWithDatabase:(id)arg1 error:(id*)arg2;
- (id)_threadLocalTransaction;
- (id)_threadLocalTransactionContext;
- (long long)_verifyDatabaseIdentifiersAreValidWithMigrationTransaction:(id)arg1 error:(id*)arg2;
- (bool)_waitForMergesWithCurrentJournal:(id)arg1 error:(id*)arg2;
- (bool)accessHighFrequencyDataStoreWithError:(id*)arg1 block:(id /* block */)arg2;
- (id)activeDatabases;
- (id)activeDatabasesLock;
- (bool)addJournalEntries:(id)arg1 error:(id*)arg2;
- (bool)addJournalEntry:(id)arg1 error:(id*)arg2;
- (void)addProtectedDataObserver:(id)arg1;
- (void)addProtectedDataObserver:(id)arg1 queue:(id)arg2;
- (id)allEntityClasses;
- (id)allEntityClassesWithProtectionClass:(long long)arg1;
- (id)assertionManager;
- (void)assertionManager:(id)arg1 assertionInvalidated:(id)arg2;
- (id)asynchronousOperationQueue;
- (id)beginExtendedTransactionWithOptions:(unsigned long long)arg1 transactionTimeout:(double)arg2 continuationTimeout:(double)arg3 error:(id*)arg4;
- (void)beginObservingContentProtection;
- (void)checkInDatabase:(id)arg1 type:(long long)arg2;
- (id)cloneAccessibilityAssertion:(id)arg1 ownerIdentifier:(id)arg2 error:(id*)arg3;
- (id)cloudSyncJournal;
- (id)contentProtectionManager;
- (void)contentProtectionStateChanged:(long long)arg1 previousState:(long long)arg2;
- (long long)currentSchemaVersionForProtectionClass:(long long)arg1;
- (void)databasePool:(id)arg1 didFlushDatabases:(id)arg2;
- (id)databasePoolForDatabaseType:(long long)arg1;
- (id)databasePoolForType;
- (id)databaseSizeInBytesExcludingHFD;
- (id)databaseTransaction:(id)arg1 checkOutDatabaseWithType:(long long)arg2 options:(unsigned long long)arg3 error:(id*)arg4;
- (void)dealloc;
- (id)diagnosticDescription;
- (bool)didRunPostMigrationUpdates;
- (bool)discardHighFrequencyDataStoreWithError:(id*)arg1;
- (id)dumpSchemaAndReturnError:(id*)arg1;
- (id)extendedDatabaseTransactionForIdentifier:(id)arg1;
- (id)extendedTransactions;
- (void)finalizeExtendedTransactionForIdentifier:(id)arg1;
- (id)highFrequencyDataStoreURL;
- (id)initWithProfile:(id)arg1;
- (void)invalidateAndWait;
- (bool)invalidated;
- (bool)isDataProtectedByFirstUnlockAvailable;
- (bool)isProtectedDataAvailable;
- (id)journal;
- (id)journalGroup;
- (id)journalQueue;
- (id)mainDatabaseURL;
- (long long)migrateOrCreateSchemaWithMigrationTransaction:(id)arg1 error:(id*)arg2;
- (id)migratedDatabases;
- (id)newDatabaseForDatabasePool:(id)arg1 error:(id*)arg2;
- (void)obliterateWithReason:(id)arg1 preserveCopy:(bool)arg2;
- (double)offsetTimeInterval;
- (unsigned long long)pendingJournalMerges;
- (void)performAsynchronously:(id /* block */)arg1;
- (bool)performMigrationWithTransactionContext:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)performTransactionWithContext:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3 block:(id /* block */)arg4 inaccessibilityHandler:(id /* block */)arg5;
- (bool)performTransactionWithOptions:(unsigned long long)arg1 error:(id*)arg2 block:(id /* block */)arg3 inaccessibilityHandler:(id /* block */)arg4;
- (bool)performTransactionWithOptions:(unsigned long long)arg1 error:(id*)arg2 usingBlock:(id /* block */)arg3 inaccessibilityHandler:(id /* block */)arg4;
- (void)performWhenDataProtectedByFirstUnlockIsAvailable:(id /* block */)arg1;
- (bool)performWithJournalType:(long long)arg1 error:(id*)arg2 block:(id /* block */)arg3;
- (bool)performWithTransactionContext:(id)arg1 error:(id*)arg2 block:(id /* block */)arg3;
- (id)profile;
- (id)profileDirectoryPath;
- (double)protectedDataFlushInterval;
- (id)protectedDatabaseURL;
- (void)removeProtectedDataObserver:(id)arg1;
- (id)schemaMigrationLock;
- (id)secondaryJournalMergeQueue;
- (void)setActiveDatabases:(id)arg1;
- (void)setActiveDatabasesLock:(id)arg1;
- (void)setAssertionManager:(id)arg1;
- (void)setAsynchronousOperationQueue:(id)arg1;
- (void)setContentProtectionManager:(id)arg1;
- (void)setDatabasePoolForType:(id)arg1;
- (void)setDidRunPostMigrationUpdates:(bool)arg1;
- (void)setExtendedTransactions:(id)arg1;
- (void)setJournalGroup:(id)arg1;
- (void)setJournalQueue:(id)arg1;
- (void)setMigratedDatabases:(id)arg1;
- (void)setOffsetTimeInterval:(double)arg1;
- (void)setPendingJournalMerges:(unsigned long long)arg1;
- (void)setProfile:(id)arg1;
- (void)setProtectedDataFlushInterval:(double)arg1;
- (void)setSchemaMigrationLock:(id)arg1;
- (void)setSecondaryJournalMergeQueue:(id)arg1;
- (void)setUnitTest_didWaitForJournalMergeHandler:(id /* block */)arg1;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 shouldPerformTransaction:(bool)arg2 timeout:(double)arg3 error:(id*)arg4;
- (id)takeAccessibilityAssertionWithOwnerIdentifier:(id)arg1 timeout:(double)arg2 error:(id*)arg3;
- (id)threadLocalIgnoreTransactionContextKey;
- (id)threadLocalTransactionContextKey;
- (id)threadLocalTransactionKey;
- (id)unitTest_currentTransaction;
- (id /* block */)unitTest_didWaitForJournalMergeHandler;
- (id)virtualFilesystemModuleForDatabase:(id)arg1;

@end
