/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit
 */

@interface PKTiledCanvasView : UIView <PKControllerDelegate, PKDrawingGestureTarget, UIGestureRecognizerDelegate> {
    bool  __didCancelSelection;
    struct CGPoint { 
        double x; 
        double y; 
    }  __drawingBeganLocation;
    double  __fixedDrawingScale;
    struct CGSize { 
        double width; 
        double height; 
    }  __fixedPixelSize;
    struct CGPoint { 
        double x; 
        double y; 
    }  __oldEraseLocation;
    bool  _allowLiveInteraction;
    long long  _currentGenerationCount;
    <PKTiledCanvasViewDelegate> * _delegate;
    CADisplayLink * _displayLink;
    PKDrawing * _drawing;
    PKController * _drawingController;
    PKDrawingGestureRecognizer * _drawingGestureRecognizer;
    double  _drawingStartTimestamp;
    id /* block */  _generateOnscreenVisibleStrokesBlock;
    PKOpenGLESView * _glView;
    bool  _hasValidOnscreenVisibleStrokes;
    PKInk * _ink;
    bool  _isDrawing;
    bool  _isErasingObjects;
    bool  _isSelecting;
    unsigned long long  _maxNumPredictionPoints;
    PKMetalView * _metalView;
    unsigned long long  _numSkippedDoubleBufferedFrames;
    NSArray * _onscreenVisibleStrokes;
    NSObject<OS_dispatch_queue> * _onscreenVisibleStrokesQueue;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _paperTransform;
    PKDrawingPowerSavingController * _powerSavingController;
    id /* block */  _purgeResourcesBlock;
    PKSelectionController * _selectionController;
    bool  _shouldPause;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _strokeTransform;
    NSMutableOrderedSet * _strokesToErase;
    SEL  _undoSelector;
    id  _undoTarget;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewScissor;
}

@property (nonatomic) bool _didCancelSelection;
@property (nonatomic) struct CGPoint { double x1; double x2; } _drawingBeganLocation;
@property (nonatomic, readonly) PKController *_drawingController;
@property (nonatomic) double _fixedDrawingScale;
@property (nonatomic) struct CGSize { double x1; double x2; } _fixedPixelSize;
@property (nonatomic) struct CGPoint { double x1; double x2; } _oldEraseLocation;
@property (nonatomic, readonly) <PKRendererControllerProtocol> *_rendererController;
@property bool allowLiveInteraction;
@property (nonatomic) long long currentGenerationCount;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKTiledCanvasViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic, retain) PKDrawing *drawing;
@property (nonatomic, retain) PKDrawingGestureRecognizer *drawingGestureRecognizer;
@property double drawingStartTimestamp;
@property (nonatomic, copy) id /* block */ generateOnscreenVisibleStrokesBlock;
@property (nonatomic, retain) PKOpenGLESView *glView;
@property (nonatomic) bool hasValidOnscreenVisibleStrokes;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PKInk *ink;
@property (nonatomic) bool isDrawing;
@property (nonatomic) bool isErasingObjects;
@property (nonatomic) bool isSelecting;
@property (nonatomic) unsigned long long maxNumPredictionPoints;
@property (nonatomic, retain) PKMetalView *metalView;
@property (nonatomic, retain) NSArray *onscreenVisibleStrokes;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *onscreenVisibleStrokesQueue;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } paperTransform;
@property (nonatomic, retain) PKDrawingPowerSavingController *powerSavingController;
@property (nonatomic, copy) id /* block */ purgeResourcesBlock;
@property (nonatomic) PKSelectionController *selectionController;
@property (nonatomic) bool shouldPause;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } strokeTransform;
@property (nonatomic, retain) NSMutableOrderedSet *strokesToErase;
@property (readonly) Class superclass;
@property (nonatomic) SEL undoSelector;
@property (nonatomic) id undoTarget;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } viewScissor;

+ (void)initialize;
+ (void)setupDefaults;

- (void).cxx_destruct;
- (void)_addSpaceBelowDrawingForStroke:(id)arg1 touch:(id)arg2;
- (void)_closeLassoForTouch:(id)arg1;
- (bool)_didCancelSelection;
- (void)_didFinishErasingStrokes:(bool)arg1;
- (struct CGPoint { double x1; double x2; })_drawingBeganLocation;
- (id)_drawingController;
- (void)_drawingDisplay:(double)arg1;
- (double)_fixedDrawingScale;
- (struct CGSize { double x1; double x2; })_fixedPixelSize;
- (void)_gestureRecognizerFailed:(id)arg1;
- (bool)_isLassoAddingSpace:(id)arg1;
- (struct CGPoint { double x1; double x2; })_oldEraseLocation;
- (id)_rendererController;
- (void)_setDrawing:(id)arg1 tiles:(id)arg2 tileTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 setupComplete:(id /* block */)arg4 completionBlock:(id /* block */)arg5;
- (void)_setFixedPointSize:(struct CGSize { double x1; double x2; })arg1 drawingScale:(double)arg2;
- (void)adjustedPixelSize:(struct CGSize { double x1; double x2; }*)arg1 drawingSize:(struct CGSize { double x1; double x2; }*)arg2;
- (bool)allowLiveInteraction;
- (struct CGPoint { double x1; double x2; })applyTransformToTouchLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)cancelGenerateVisibleStrokesBlockIfNecessary;
- (struct CGPoint { double x1; double x2; })clampInputPointForSelection:(struct CGPoint { double x1; double x2; })arg1;
- (void)clearOnscreenVisibleStrokeCacheAndCancelBlockIfNecessary;
- (long long)currentGenerationCount;
- (void)dealloc;
- (void)delayCompletionBlockUntilPresentation:(id /* block */)arg1;
- (id)delegate;
- (void)dismissEditMenuIfNecessary;
- (id)displayLink;
- (id)drawing;
- (void)drawingBegan:(id)arg1;
- (void)drawingCancelled;
- (void)drawingChanged:(id)arg1;
- (void)drawingEnded:(id)arg1;
- (void)drawingEstimatedPropertiesUpdated:(id)arg1;
- (id)drawingGestureRecognizer;
- (struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })drawingInputPoint:(struct CGPoint { double x1; double x2; })arg1 forTouch:(id)arg2 predicted:(bool)arg3;
- (void)drawingMoved:(id)arg1 withEvent:(id)arg2;
- (double)drawingStartTimestamp;
- (void)eraseStrokesForPoint:(struct CGPoint { double x1; double x2; })arg1 prevPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)eraserBegan:(id)arg1;
- (void)eraserCancelled;
- (void)eraserEnded:(id)arg1;
- (void)eraserMoved:(id)arg1;
- (void)findOnscreenVisibleStrokesForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inDrawing:(id)arg2 completion:(id /* block */)arg3;
- (id /* block */)generateOnscreenVisibleStrokesBlock;
- (void)generateOnscreenVisibleStrokesForCanvas;
- (void)generateStrokesOnCanvasForVisibleFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inDrawing:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (id)glView;
- (void)handleDrawingShouldPause:(bool)arg1;
- (bool)hasValidOnscreenVisibleStrokes;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)ink;
- (bool)isDrawing;
- (bool)isErasingObjects;
- (bool)isSelecting;
- (void)lassoEnded:(id)arg1;
- (bool)lassoShouldClearSelectionOrToggleMenu:(id)arg1;
- (double)layerContentScale;
- (void)layoutSubviews;
- (unsigned long long)maxNumPredictionPoints;
- (id)metalView;
- (id)onscreenVisibleStrokes;
- (id)onscreenVisibleStrokesQueue;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })paperTransform;
- (id)powerSavingController;
- (id /* block */)purgeResourcesBlock;
- (void)registerUndoForStroke:(id)arg1;
- (void)resizeBackingBuffersForPixelSize:(struct CGSize { double x1; double x2; })arg1 drawingScale:(double)arg2;
- (void)selectionBegan:(id)arg1;
- (id)selectionController;
- (void)setAllowLiveInteraction:(bool)arg1;
- (void)setCurrentGenerationCount:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setDrawing:(id)arg1;
- (void)setDrawingGestureRecognizer:(id)arg1;
- (void)setDrawingStartTimestamp:(double)arg1;
- (void)setGenerateOnscreenVisibleStrokesBlock:(id /* block */)arg1;
- (void)setGlView:(id)arg1;
- (void)setHasValidOnscreenVisibleStrokes:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setInk:(id)arg1;
- (void)setIsDrawing:(bool)arg1;
- (void)setIsErasingObjects:(bool)arg1;
- (void)setIsSelecting:(bool)arg1;
- (void)setMaxNumPredictionPoints:(unsigned long long)arg1;
- (void)setMetalView:(id)arg1;
- (void)setNeedsDrawingDisplay;
- (void)setOnscreenVisibleStrokes:(id)arg1;
- (void)setOnscreenVisibleStrokesQueue:(id)arg1;
- (void)setPaperTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setPowerSavingController:(id)arg1;
- (void)setPurgeResourcesBlock:(id /* block */)arg1;
- (void)setSelectionController:(id)arg1;
- (void)setShouldPause:(bool)arg1;
- (void)setStrokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setStrokesToErase:(id)arg1;
- (void)setUndoSelector:(SEL)arg1;
- (void)setUndoTarget:(id)arg1;
- (void)setViewScissor:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)set_didCancelSelection:(bool)arg1;
- (void)set_drawingBeganLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)set_fixedDrawingScale:(double)arg1;
- (void)set_fixedPixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)set_oldEraseLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setupDisplayLink;
- (void)setupDrawing;
- (void)setupGestures;
- (void)setupMetalViewForWideGamut:(bool)arg1 withPixelSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setupOpenGLViewForWideGamut:(bool)arg1 withPixelSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setupViewWithPixelSize:(struct CGSize { double x1; double x2; })arg1 drawingSize:(struct CGSize { double x1; double x2; })arg2;
- (bool)shouldPause;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })strokeTransform;
- (id)strokesToErase;
- (void)toggleEditMenuAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (SEL)undoSelector;
- (id)undoTarget;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })viewScissor;

@end
