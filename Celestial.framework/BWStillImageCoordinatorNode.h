/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial
 */

@interface BWStillImageCoordinatorNode : BWNode <BWFigVideoCaptureStreamStillImageCaptureDelegate, BWStillImageProcessingStatusDelegate> {
    bool  _active;
    bool  _alwaysRequestsPreBracketedEV0;
    BWFigVideoCaptureDevice * _captureDevice;
    int  _captureRequestCount;
    int  _captureType;
    int  _clientExpectedImagesOrErrorsForRequest;
    int  _clientReceivedImagesOrErrorsForRequest;
    FigCaptureStillImageSettings * _currentRequestedStillImageCaptureSettings;
    NSArray * _currentResolvedPhotoManifest;
    BWStillImageCaptureSettings * _currentResolvedStillImageCaptureSettings;
    unsigned int  _firedDelegateCallbackFlags;
    NSDictionary * _portTypeToInput;
    NSDictionary * _portTypeToOutput;
    int  _prepareRequestCount;
    NSMutableDictionary * _receivedImagesOrErrorsForRequestByPortType;
    bool  _receivedQuadraHighResError;
    NSMutableArray * _requestQueue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _requestQueueLock;
    FigStateMachine * _stateMachine;
    <BWStillImageCaptureStatusDelegate> * _stillImageCaptureStatusDelegate;
    NSObject<OS_dispatch_group> * _stillImageDispatchGroup;
    NSObject<OS_dispatch_queue> * _stillImageDispatchQueue;
    bool  _stillImageGraphSupportsMultipleInflightCaptures;
    bool  _usesHDRPreBracketFrameForErrorRecovery;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) <BWStillImageCaptureStatusDelegate> *stillImageCaptureStatusDelegate;
@property (readonly) Class superclass;

+ (void)initialize;

- (void)_addExifOrientationToSampleBufferMetadata:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_beginCapture;
- (void)_beginInitiatingCapture;
- (void)_beginPreparingCapture;
- (void)_beginResolvingCapture;
- (int)_captureTypeForSettings:(id)arg1 frameStatistics:(struct { double x1; float x2; float x3; double x4; float x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned char x10; unsigned char x11; unsigned int x12; int x13; int x14; int x15; unsigned int x16; unsigned char x17; unsigned char x18; float x19; float x20; float x21; unsigned char x22; double x23; double x24; int x25; int x26; int x27; float x28; float x29; float x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned char x35; int x36; int x37; float x38; float x39; int x40; int x41; long long x42; }*)arg2 captureFlags:(unsigned long long*)arg3;
- (id)_clientBracketSettingsWithCurrentFrameStats:(struct { double x1; float x2; float x3; double x4; float x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned char x10; unsigned char x11; unsigned int x12; int x13; int x14; int x15; unsigned int x16; unsigned char x17; unsigned char x18; float x19; float x20; float x21; unsigned char x22; double x23; double x24; int x25; int x26; int x27; float x28; float x29; float x30; unsigned int x31; unsigned int x32; unsigned int x33; unsigned int x34; unsigned char x35; int x36; int x37; float x38; float x39; int x40; int x41; long long x42; }*)arg1 stillImageSettings:(id)arg2;
- (void)_completeRequestWithStatus:(int)arg1;
- (void)_configureCurrentCaptureRequestStateForFigCaptureStillImageSettings;
- (void)_didCaptureStillImage;
- (void)_didResolveReferenceFrameBracketedCaptureSequenceNumber:(id)arg1;
- (void)_didResolveStillImagePTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 isPreBracketedEV0:(bool)arg2;
- (int)_enqueueRequestWithSettings:(id)arg1 serviceRequestsIfNecessary:(bool)arg2;
- (void)_flushStillImageRequestWithError:(int)arg1;
- (id)_initWithCaptureDevice:(id)arg1 inputPortTypes:(id)arg2 allStateTransitionsHandler:(id /* block */)arg3;
- (id)_outputForInput:(id)arg1;
- (id)_resolvePhotoManifest;
- (void)_serviceNextRequest;
- (void)_setupStateMachineWithAllStateTransitionsHandler:(id /* block */)arg1;
- (id)_stateMachine;
- (id)_stillImageDispatchQueue;
- (void)_unpackNextRequest;
- (void)_willBeginCapture;
- (void)_willCaptureStillImage;
- (bool)alwaysRequestsPreBracketedEV0;
- (int)captureStillImageNowWithSettings:(id)arg1;
- (void)captureStream:(id)arg1 didCapturePreBracketedEV0ImageWithPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)captureStream:(id)arg1 didCompleteStillImageCaptureWithPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 referenceFrameBracketedCaptureSequenceNumber:(id)arg3;
- (void)captureStream:(id)arg1 stillImageCaptureError:(int)arg2;
- (void)captureStreamWillBeginStillImageCapture:(id)arg1;
- (void)clientReceivedPayloadForSettings:(id)arg1 status:(int)arg2 clientIsMidStillImageGraph:(bool)arg3;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (void)handleNodeError:(id)arg1 forInput:(id)arg2;
- (id)initWithCaptureDevice:(id)arg1 inputPortTypes:(id)arg2;
- (int)initiateStillImageCaptureNowWithSettings:(id)arg1;
- (id)inputForPortType:(id)arg1;
- (void)node:(id)arg1 didReceiveOriginalImageWithPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)node:(id)arg1 didSelectReferenceFrameBracketedCaptureSequenceNumber:(id)arg2 pts:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)nodeDidCaptureStillImage:(id)arg1;
- (id)nodeSubType;
- (id)nodeType;
- (id)outputForPortType:(id)arg1;
- (int)prepareStillImageCaptureNowWithSettings:(id)arg1;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setAlwaysRequestsPreBracketedEV0:(bool)arg1;
- (void)setStillImageCaptureStatusDelegate:(id)arg1;
- (void)setStillImageGraphSupportsMultipleInflightCaptures:(bool)arg1;
- (void)setUsesHDRPreBracketFrameForErrorRecovery:(bool)arg1;
- (id)stillImageCaptureStatusDelegate;
- (bool)stillImageGraphSupportsMultipleInflightCaptures;
- (bool)usesHDRPreBracketFrameForErrorRecovery;
- (void)willStopGraph:(bool)arg1;
- (int)worstCaseMaxBracketedCaptureBufferCountForPreparedSettings:(id)arg1;

@end
