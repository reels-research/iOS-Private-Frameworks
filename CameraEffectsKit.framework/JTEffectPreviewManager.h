/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CameraEffectsKit.framework/CameraEffectsKit
 */

@interface JTEffectPreviewManager : NSObject <PVLivePlayerDelegate> {
    bool  _allowCachingStaticPreviewsToDisk;
    JTImage * _backgroundImage;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    NSArray * _continousPreviewAnimojis;
    NSArray * _continousPreviewEffects;
    JTEffectContinousPreviewOptions * _continousPreviewOptions;
    PVLivePlayer * _continousPreviewPlayer;
    NSArray * _continousPreviewProVideoEffects;
    bool  _continouslyPreviewing;
    JTImage * _defaultPreviewImage;
    <JTEffectPreviewManagerDelegate> * _delegate;
    NSArray * _effectStackAppliedBeforeContinousPreview;
    JTFrameRateCalculator * _fpsCalc;
    NSObject * _pickerPreviewingToken;
    JTPixelRotationSession * _pixelRotationSession;
    JTCacheDictionary * _previewCache;
    JTEffectPickerPreviewDiskCache * _previewDiskCache;
    NSObject<OS_dispatch_queue> * _previewQueue;
    struct CGSize { 
        double width; 
        double height; 
    }  _previewRenderSize;
    JTEffectsPreviewGenerator * _staticPreviewGenerator;
}

@property bool allowCachingStaticPreviewsToDisk;
@property (retain) JTImage *backgroundImage;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, retain) NSArray *continousPreviewAnimojis;
@property (nonatomic, copy) NSArray *continousPreviewEffects;
@property (nonatomic, retain) JTEffectContinousPreviewOptions *continousPreviewOptions;
@property (nonatomic, retain) PVLivePlayer *continousPreviewPlayer;
@property (nonatomic, retain) NSArray *continousPreviewProVideoEffects;
@property (getter=isContinouslyPreviewing) bool continouslyPreviewing;
@property (readonly, copy) NSString *debugDescription;
@property (retain) JTImage *defaultPreviewImage;
@property (nonatomic) <JTEffectPreviewManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSArray *effectStackAppliedBeforeContinousPreview;
@property (nonatomic, readonly) JTFrameRateCalculator *fpsCalc;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject *pickerPreviewingToken;
@property (nonatomic, retain) JTPixelRotationSession *pixelRotationSession;
@property (nonatomic, readonly) JTCacheDictionary *previewCache;
@property (nonatomic, readonly) JTEffectPickerPreviewDiskCache *previewDiskCache;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *previewQueue;
@property (nonatomic) struct CGSize { double x1; double x2; } previewRenderSize;
@property (nonatomic) struct CGSize { double x1; double x2; } previewSize;
@property (nonatomic, retain) JTEffectsPreviewGenerator *staticPreviewGenerator;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)JT_canCacheEffectToDisk:(id)arg1;
- (void)JT_dispatchBlockOnCallbackQueueImmediatelyWhenPossible:(id /* block */)arg1;
- (void)JT_renderPreviewForEffect:(id)arg1 completion:(id /* block */)arg2;
- (void)JT_stopCachingPreviewsContinuously;
- (void)adjustAnimationInfoForLiveCaptureRequest:(id)arg1;
- (bool)allowCachingStaticPreviewsToDisk;
- (id)backgroundImage;
- (id)buildRenderRequest:(id)arg1 time:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)cachedPreviewForEffect:(id)arg1 completion:(id /* block */)arg2;
- (void)cachedPreviewForEffectIDs:(id)arg1 completion:(id /* block */)arg2;
- (id)callbackQueue;
- (void)centerAnimationInfoForRequest:(id)arg1;
- (id)continousPreviewAnimojis;
- (id)continousPreviewEffects;
- (id)continousPreviewOptions;
- (id)continousPreviewPlayer;
- (id)continousPreviewProVideoEffects;
- (void)dealloc;
- (id)defaultPreviewImage;
- (id)delegate;
- (id)effectStackAppliedBeforeContinousPreview;
- (id)fpsCalc;
- (bool)hasCachedPreviewForEffectID:(id)arg1;
- (bool)highQualityRendering;
- (id)initWithPreviewSize:(struct CGSize { double x1; double x2; })arg1 callbackQueue:(id)arg2;
- (bool)isContinouslyPreviewing;
- (bool)lowPriorityScheduling;
- (id)pickerPreviewingToken;
- (id)pixelRotationSession;
- (unsigned int)preferredSchedulingQueueSize;
- (void)preparePreviewForEffect:(id)arg1 completion:(id /* block */)arg2;
- (id)previewCache;
- (id)previewDiskCache;
- (id)previewQueue;
- (struct CGSize { double x1; double x2; })previewRenderSize;
- (struct CGSize { double x1; double x2; })previewSize;
- (void)purgeCachedPreviewForEffectID:(id)arg1;
- (void)purgeCachedPreviewsForAllEffects;
- (void)renderRequestComplete:(id)arg1 results:(id)arg2 completedOutOfOrder:(bool)arg3;
- (bool)rendersDefaultContinousPreviewImage;
- (void)setAllowCachingStaticPreviewsToDisk:(bool)arg1;
- (void)setBackgroundImage:(id)arg1;
- (void)setContinousPreviewAnimojis:(id)arg1;
- (void)setContinousPreviewEffects:(id)arg1;
- (void)setContinousPreviewOptions:(id)arg1;
- (void)setContinousPreviewPlayer:(id)arg1;
- (void)setContinousPreviewProVideoEffects:(id)arg1;
- (void)setContinouslyPreviewing:(bool)arg1;
- (void)setDefaultPreviewImage:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEffectStackAppliedBeforeContinousPreview:(id)arg1;
- (void)setPickerPreviewingToken:(id)arg1;
- (void)setPixelRotationSession:(id)arg1;
- (void)setPreviewRenderSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPreviewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setStaticPreviewGenerator:(id)arg1;
- (void)startCachingPreviewsContinuouslyWithOptions:(id)arg1;
- (id)staticPreviewGenerator;
- (void)stopCachingPreviewsContinuously;

@end
